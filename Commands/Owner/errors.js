/*
    Owner command to count and recieve the error files. Clearing the directory is an option
*/

const {SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, ComponentType,
    PermissionFlagsBits,
    EmbedBuilder,
    MessageFlags,
} = require('discord.js');

const fs = require('graceful-fs');
const path = require('path');
const archiver = require('archiver');

module.exports = {
    ownerOnly: true,
    data: new SlashCommandBuilder()
        .setName('errors')
        .setDescription('Count how many errors were logged inside the error directory.')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    
    async execute(interaction, client) {
        const dirPath = './error_dumps';
        // reading all error logs generated by process.on events
        const errorFiles = fs.readdirSync(dirPath).map(file => file).filter((file) => file !== 'error.log');

        const embed = new EmbedBuilder()
            .setColor('Aqua')
        
        if(errorFiles.length == 0) {
            return await interaction.reply({
                embeds: [
                    embed.setTitle('No error dumps found.')
                        .setDescription('No error logs inside the dump directory.')
                ],
                flags: MessageFlags.Ephemeral
            });
        }

        await interaction.deferReply();
        embed.setTitle('Error dumps found')
            .setDescription(`Found \`${errorFiles.length}\` files.\n`)
            .setFields(
                {
                    name: 'Clear',
                    value: "Clears the dump directory"
                },
                {
                    name: "Dump",
                    value: "Dumps the archive of all logs in the currect text channel."
                }
            )
        
        const clearButton = new ButtonBuilder()
            .setCustomId('clear-button')
            .setLabel('Clear')
            .setStyle(ButtonStyle.Danger)

        const dumpButton = new ButtonBuilder()
            .setCustomId('dump-button')
            .setLabel('Dump')
            .setStyle(ButtonStyle.Secondary)

        const actionRow = new ActionRowBuilder()
            .addComponents(clearButton, dumpButton);

        const message = await interaction.editReply({
            embeds: [embed],
            components: [actionRow]
        });

        const collector = message.createMessageComponentCollector({
            ComponentType: ComponentType.Button,
            filter: (i) => i.user.id === interaction.user.id,
            time: 600_000
        });

        collector.on('collect', async (buttonInteraction) => {
            if(buttonInteraction.customId === 'clear-button') {
                // deleting all files inside dirPath
                fs.readdir(dirPath, (err, files) => {
                    for(const file of files) {
                        fs.unlink(path.join(dirPath, file), (err) => {
                            if(err) console.error(err);
                        });
                    }
                });
                await buttonInteraction.reply({content: 'Error logs cleared successfully.', flags: MessageFlags.Ephemeral});
                collector.stop();
            } else if(buttonInteraction.customId === 'dump-button') {
                await buttonInteraction.deferReply();
                dumpButton.setDisabled(true);
                await message.edit({components: [actionRow]});
                const output = fs.createWriteStream('./temp/errors.zip');
                const archive = archiver('zip');
                const embedDump = new EmbedBuilder()
                    .setColor('Aqua')
                    .setTitle('âš™ Dumping error logs...')
                        
                    

                    archive.on('error', (err) => {
                        console.error(err);
                    });

                    archive.pipe(output);

                    archive.directory(dirPath, false);

                    await archive.finalize();
                    embedDump.setDescription(`Error logs were zipped for a total of ${archive.pointer()} bytes.`)
                    await buttonInteraction.editReply({embeds: [embedDump], files: ['./temp/errors.zip']});

                    fs.unlink(path.join('./temp', 'errors.zip'), (err) => {
                        if(err) console.error(err);
                    });
            }
        });

        collector.on('end', async () => {
            try{
                await message.delete();
            } catch(err) {}
        })
        
    }
}